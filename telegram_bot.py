from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from telegram.ext import MessageHandler, filters
import html

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –ø—Ä–∞—Ü—é—é –Ω–∞ –Ω–æ–≤—ñ–π –≤–µ—Ä—Å—ñ—ó –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ ü§ñ")
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n/start\n/help\n/post\n/article")
ID = "@progg_notebook"
async def post_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = ' '.join(context.args)
    if not text:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∞–±–æ –¥–æ–¥–∞–π —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º –ø—ñ—Å–ª—è /post")
        return
    try:
        await context.bot.send_message(chat_id=ID, text=text)
        await update.message.reply_text("–¢–µ–∫—Å—Ç –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!")
    except Exception as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")
async def post_photo_with_caption(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message.photo:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º, —â–æ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ /post")
        return
    photo = message.photo[-1]
    caption = message.caption or ""
    if caption.lower().startswith("/post"):
        cleaned_caption = caption[len("/post"):].strip()
    else:
        cleaned_caption = caption

    try:
        await context.bot.send_photo(
            chat_id=ID,
            photo=photo.file_id,
            caption=cleaned_caption if cleaned_caption else ""
        )
        await message.delete()
        await update.message.reply_text("–§–æ—Ç–æ –∑ —Ç–µ–∫—Å—Ç–æ–º –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!")
    except Exception as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")
async def article(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw_text = update.message.text
    parts = raw_text.replace("/article", "", 1).strip().split("|")
    if len(parts) < 5:
        await update.message.reply_text("–ü–æ—Ç—Ä—ñ–±–Ω–æ 5 —á–∞—Å—Ç–∏–Ω–∏: –¢–µ–º–∞|–û–ø–∏—Å|–ö–æ–¥|–î–∂–µ—Ä–µ–ª–∞|–•–µ—à—Ç–µ–≥")
        return
    topic = parts[0].strip()
    description = parts[1].strip()
    code = parts[2].strip()
    sources = parts[3].strip()
    hashtag = parts[4].strip()
    code = html.escape(code.strip())
    message = (
        f"üè∑Ô∏è <b>–¢–µ–º–∞:</b> {topic}\n"
        f"üß© <b>–û–ø–∏—Å:</b> {description}\n\n"
        f"üí° <b>–ö–æ–¥:</b>\n<pre><code>{code}</code></pre>\n\n"
        f"üîó <b>–î–∂–µ—Ä–µ–ª–∞:</b> {sources}\n\n"
        f"#Ô∏è‚É£ <b>–•–µ—à—Ç–µ–≥:</b> #{hashtag}"
    )
    try:
        await context.bot.send_message(
            chat_id=ID,
            text=message,
            parse_mode="HTML"
        )
        await update.message.reply_text("–°—Ç–∞—Ç—Ç—è –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∞!")
    except Exception as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {e}")

def main():
    app = ApplicationBuilder().token("7943415978:AAEPjTG1oGvr545LkTLwyRat5_0EcstCaOA").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.PHOTO & filters.CaptionRegex(r'^/post'), post_photo_with_caption))
    app.add_handler(CommandHandler("post", post_text))
    app.add_handler(CommandHandler("article", article))

    app.run_polling()

if __name__ == "__main__":
    main()
